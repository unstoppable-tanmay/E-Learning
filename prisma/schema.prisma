generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String    @id @default(cuid())
  userId            String  
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.LongText
  access_token      String? @db.LongText
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.LongText
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  role         String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])

  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model User {
  id             String    @id @default(cuid())
  provider       Boolean   @default(false)
  name           String?   @default("Harry") @db.VarChar(255)
  email          String    @unique @db.VarChar(255)
  password       String?   @db.VarChar(255)
  emailVerified  DateTime? @map("email_verified")
  image          String?
  education      String?
  tags           String?
  recentCourseId String?
  role           Role      @default(USER)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  createdCourses Course[]
  enrollments    Enrollment[]

  accounts Account[]
  sessions Session[]
}

model Course {
  id          String       @id @default(cuid())
  authorId    String
  name        String       @db.VarChar(255)
  description String       @db.VarChar(400)
  price       String
  image       String       @db.VarChar(400)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  author      User         @relation(fields: [authorId], references: [id])
  enrollments Enrollment[]
  lessons     Lesson[]

  @@index([authorId], map: "Course_authorId_fkey")
}

model Enrollment {
  userId       String
  courseId     String
  progress     Float    @default(0)
  progressMark String?  @default("")
  createdAt    DateTime @default(now())
  updatedAt    DateTime @default(now()) @updatedAt
  course       Course   @relation(fields: [courseId], references: [id])
  user         User     @relation(fields: [userId], references: [id])

  @@id([userId, courseId])
  @@index([courseId], map: "Enrollment_courseId_fkey")
}

model Lesson {
  id          String     @id @default(cuid())
  courseId    String
  sl          String
  titel       String
  description String
  type        LessonType
  video       String?
  pdf         String?
  quiz        Json?
  additional  String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  course      Course     @relation(fields: [courseId], references: [id])

  @@index([courseId], map: "Lesson_courseId_fkey")
}

enum Role {
  ADMIN
  USER
}

enum LessonType {
  VIDEO
  PDF
  QUIZ
}
